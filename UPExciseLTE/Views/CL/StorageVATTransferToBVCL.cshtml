@model UPExciseLTE.Models.TankTransferDetail
@{
    ViewBag.Title = "StorageVATTransferToBVCL";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string str = ViewBag.Msg;
    if (!string.IsNullOrEmpty(str))
    {
        <script type="text/javascript"> var msg = '@ViewBag.Msg'; alert(msg);</script>
    }
}

@using (Html.BeginForm("StorageVATTransferToBVCL", "CL", FormMethod.Post, new { @enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="page-content-inner">
        <div class="row">
            <div class="col-md-12">
                <div class="portlet box green">
                    <div class="portlet-title">
                        <div class="caption">
                            <span><i class="fa fa-gift"></i>&nbsp; Storage VAT Transfer To Blending VAT&nbsp;(@UserSession.LoggedInUserName.ToString())</span>
                        </div>
                    </div>
                    <div class="portlet-body form" style="background-color:#f5f5f5">
                        <div class="form-body">
                            <div class="row">

                                <div class="form-group col-md-4">
                                    <label class="control-label">Storage VAT<b style="color:red; font-weight:800">*</b></label>
                                    @Html.DropDownListFor(m => m.IssuedFromSVId, (IEnumerable<SelectListItem>)ViewBag.IssuedFromSVId, new { @id = "ddlIssuedFromSVId", @class = "form-control" })
                                </div>
                                <div class="form-group col-md-4">
                                    <label class="control-label">Storage VAT BL</label>
                                    @Html.TextBox("txtSVBal", "", new { @id = "txtSVBal", @class = "form-control", @readonly = true })
                                </div>
                                <div class="form-group col-md-4">
                                    <label class="control-label">Storage VAT Spirit Type</label>
                                    @Html.TextBox("txtSVSpiritType", "", new { @id = "txtSVSpiritType", @class = "form-control", @readonly = true })
                                </div>
                            </div>

                            <div class="row">
                                <div class="form-group col-md-4">
                                    <label class="control-label">Blending VAT<b style="color:red; font-weight:800">*</b></label>
                                    @Html.DropDownListFor(m => m.IssuedFromBlendingId, (IEnumerable<SelectListItem>)ViewBag.BlendingVAT, new { @id = "ddlIssuedFromBlendingId", @class = "form-control" })
                                </div>
                                <div class="form-group col-md-4">
                                    <label class="control-label">Blending VAT Balance</label>
                                    @Html.TextBox("txtBlendingBal", "", new { @id = "txtBlendingBal", @class = "form-control", @readonly = true })
                                </div>
                                <div class="form-group col-md-4">
                                    <label class="control-label">Blending VAT Capacity</label>
                                    @Html.TextBox("txtBlendingCapacity", "", new { @id = "txtBlendingCapacity", @class = "form-control", @readonly = true })
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-md-4">
                                    <label class="control-label">Spirit Type (in Blending VAT)</label>
                                    @Html.TextBox("txtBVSpiritType", "", new { @id = "txtBVSpiritType", @class = "form-control", @readonly = true })
                                </div>
                                <div class="form-group col-md-4">
                                    <label class="control-label">Brand (in Blending VAT)</label>
                                    @Html.TextBox("txtBVBrand", "", new { @id = "txtBVBrand", @class = "form-control", @readonly = true })
                                </div>
                                <div class="form-group col-md-4">
                                    <label class="control-label">Transfer Brand</label>
                                    @Html.DropDownListFor(m => m.BrandID, (IEnumerable<SelectListItem>)ViewBag.Brand, new { @id = "ddlBrand", @class = "form-control" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-md-4">
                                    <label class="control-label">Transfer form SV AL (as per dip book)<b style="color:red; font-weight:800">*</b></label>
                                    @Html.TextBoxFor(m => m.dipForm, new { @id = "txtdipForm", @class = "form-control", @onkeyUp = "CheckTransfer();", @required = "required", @onkeypress = "return isfloatNumber(this, event);", @MaxLength = 5  })
                                </div>
                                <div class="form-group col-md-4">
                                    <label class="control-label">Received in BV AL (as per dip book)<b style="color:red; font-weight:800">*</b></label>
                                    @Html.TextBoxFor(m => m.dipTo, "", new { @id = "txtdipTo", @class = "form-control", @onkeyUp = "CheckTransfer();", @onkeypress = "return isfloatNumber(this, event);", @MaxLength = 5 })
                                </div>
                                <div class="form-group col-md-4">
                                    <label class="control-label">Tank Transfer Wastage AL</label>
                                    @Html.TextBoxFor(m => m.Wastage, new { @id = "txtWastage", @class = "form-control", @readonly = true, @required = "required", @onkeypress = "return isfloatNumber(this, event);", @MaxLength = 5 })
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-md-4">
                                    <label class="control-label">Dip of Blending VAT<b style="color:red; font-weight:800">*</b></label>
                                    @Html.TextBoxFor(model => model.Dip, new { @class = "form-control", @id = "txtDip", onkeypress = "return isfloatNumber(this, event);", @required = "required", @maxlength = "10" })
                                </div>
                                <div class="form-group col-md-4">
                                    <label class="control-label">Temperature (in °C)<b style="color:red; font-weight:800">*</b></label>
                                    @Html.TextBoxFor(model => model.Temperature, new { @class = "form-control", @id = "txtTemperature", onkeypress = "return isfloatNumber(this, event);", @required = "required", @maxlength = "10"  })
                                </div>
                                <div class="form-group col-md-4">
                                    <label class="control-label">Indication<b style="color:red; font-weight:800">*</b></label>
                                    @Html.TextBoxFor(model => model.Indication, new { @class = "form-control", @id = "txtIndication", onkeypress = "return isfloatNumber(this, event);", @required = "required", @maxlength = "10" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-md-4">
                                    <label class="control-label">Alcoholic Liter of Storage VAT</label>
                                    @Html.TextBox("txtSVAL", "", new { @id = "txtSVAL", @class = "form-control", @readonly = true })
                                </div>
                                <div class="form-group col-md-4">
                                    <label class="control-label">Alcoholic Liter of Blending VAT<b style="color:red; font-weight:800">*</b></label>
                                    @Html.TextBoxFor(model => model.IssueAL, new { @class = "form-control", @id = "txtIssueAL", onkeypress = "return isfloatNumber(this, event);", @required = "required", @maxlength = "10" })
                                </div>

                                <div class="form-group col-md-4">
                                    <label class="control-label">Remark<b style="color:red; font-weight:800">*</b></label>
                                    @Html.TextAreaFor(model => model.Remark, new { @class = "form-control", @id = "txtRemark", @required = "required", @maxlength = "250" })
                                </div>
                            </div>
                        </div>
                        <div class="clearfix"></div>
                        <center>
                            <div class="form-actions">
                                <button type="submit" class="btn green" onclick="return Validation();">Submit</button>
                                <button type="button" class="btn danger" style="background-color:crimson; color:white">Reset</button>
                            </div>
                        </center>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<script type="text/javascript">
    function Validation() {
        if (document.getElementById("txtWastageBL").value.trim() == "") {
            document.getElementById("txtWastageBL").value = 0;
        }
        var UnitTankId = $('#ddlIssuedFromSVId').val();
        if (UnitTankId == "-1") {
            alert("Please Select Storage VAT");
            $('#ddlUnitTank').focus();
            return false;
        }
        var BottlingTank = $('#ddlBBT').val();
        if (BottlingTank == "-1") {
            alert("Please Select Bottling Tank");
            $('#ddlBBT').focus();
            return false;
        }
        if (document.getElementById("txtTransferBL").value.trim() == "" || parseFloat(document.getElementById("txtTransferBL").value.trim()) <= 0) {
            alert("Please Enter Valid Transfer Bulk Litre");
            document.getElementById("txtTransferBL").focus();
            return false;
        }
    }
    function isfloatNumber(txt, evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode == 46) {
            //Check if the text already contains the . character
            if (txt.value.indexOf('.') === -1) {
                return true;
            } else {
                return false;
            }
        } else {
            if (charCode > 31
                && (charCode < 48 || charCode > 57))
                return false;
        }
        return true;
    }
    $('#ddlIssuedFromSVId').change(function () {
        var UnitTankId = $('#ddlIssuedFromSVId').val();
        if (UnitTankId != "-1") {
            UnitTankChange(UnitTankId);
        }
    });
    function UnitTankChange(UnitTankId) {
        $.ajax({
            url: '/CL/GetStorageVATDetails',
            data: { 'SVID': UnitTankId },
            datatype: "json",
            type: "GET",
            success: function (data) {
                var res = data.split(",");
                document.getElementById("txtSVBal").value = res[2];
                document.getElementById("txtSVSpiritType").value = res[3];
                document.getElementById("txtSVAL").value = res[4];
                
            },
            error: function (data) {
                alert("Error in GetUnitTankForDDl Loading");
            }
        });
    }
    $('#ddlIssuedFromBlendingId').change(function () {
        var BBTId = $('#ddlIssuedFromBlendingId').val();
        if (BBTId != "-1") {
            BBTChange(BBTId);
        }
    });
    function BBTChange(BBTId) {
        $.ajax({
            url: '/CL/GetBlendingVATForDDl',
            data: { 'BVId': BBTId },
            datatype: "json",
            type: "GET",
            success: function (data) {
                var res = data.split(",");
                document.getElementById("txtBlendingBal").value = res[0];
                document.getElementById("txtBlendingCapacity").value = res[1];
                document.getElementById("txtBVSpiritType").value = res[2];
                document.getElementById("txtBVBrand").value = res[3];
            },
            error: function (data) {
                alert("Error in GetBBTForDDl Loading");
            }
        });
    }
    function CheckTransfer() {
        var txtdipForm = parseFloat(document.getElementById("txtdipForm").value);
        var txtdipTo = parseFloat(document.getElementById("txtdipTo").value);
        if (txtdipTo > txtdipForm) {
            alert("Max Transfer BL is " + txtdipForm);
            document.getElementById("txtdipTo").value = txtdipForm;
            
        }
        document.getElementById("txtWastage").value = txtdipForm - txtdipTo;
    }
</script>

